name: CI
  
on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            mode: "gcc"
          - os: ubuntu-20.04
            mode: "clang"
          - os: ubuntu-20.04
            mode: "win64"
          - os: ubuntu-20.04
            mode: "win32"
          # - os: macos-latest
          #   architecture: "x64"
          # - os: windows-latest
          #   architecture: "x64"
          # - os: windows-latest
          #   architecture: "x86"

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodule
      run: |
        git submodule init
        git submodule update
    - name: Set up UASM (Linux)
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        curl -L https://github.com/Terraspace/UASM/archive/refs/tags/v2.55.tar.gz | tar xz
        make -C UASM-2.55 -f gccLinux64.mak
        sudo cp UASM-2.55/GccUnixR/uasm /usr/local/bin/
    - name: Set up UASM (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        curl -L https://github.com/Terraspace/UASM/archive/refs/tags/v2.55.tar.gz | tar xz
        sed -i -e 's/-ansi//' UASM-2.55/ClangOSX64.mak
        sed -i -e 's/\/\/#include "simd.h"/void AddSimdTypes();\/\/#include "simd.h"/' UASM-2.55/assemble.c
        make -C UASM-2.55 -f ClangOSX64.mak CC=clang
        sudo cp UASM-2.55/GccUnixR/uasm /usr/local/bin/
    # - name: Set up UASM (Win)
    #   if: ${{ matrix.os == 'windows-latest' }}
    #   shell: bash
    #   run: |
    #     curl -L https://github.com/Terraspace/UASM/archive/refs/tags/v2.55.tar.gz | tar xz
    #     make -C UASM-2.55 -f GccWin64.mak
    #     cp UASM-2.55/MinGW-w64R/hjwasm.exe C:/windows/system32/uasm.exe
    - name: Build (Linux/GCC)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'gcc' }}
      run: |
        mkdir -p bin/Codecs
        make -C CPP/7zip/Bundles/Alone -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Bundles/Alone/b/g_x64/7za bin/
        make -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Bundles/Alone2/b/g_x64/7zz bin/
        make -C CPP/7zip/Bundles/Alone7z -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Bundles/Alone7z/b/g_x64/7zr bin/
        make -C CPP/7zip/Bundles/Format7zF -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Bundles/Format7zF/b/g_x64/7z.so bin/
        make -C CPP/7zip/Bundles/SFXCon -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Bundles/SFXCon/b/g_x64/7zCon.sfx bin/
        make -C CPP/7zip/UI/Client7z -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/UI/Client7z/b/g_x64/7zcl bin/
        make -C CPP/7zip/UI/Console -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/UI/Console/b/g_x64/7z bin/
        #make -C C/Util/7z -f ../../cmpl_gcc_x64.mak -j16
        #cp C/Util/7z/b/g_x64/7zdec bin/
        #make -C C/Util/lzma -f ../../cmpl_gcc_x64.mak -j16
        #cp C/Util/7z/b/g_x64/7lzma bin/
        make -C CPP/7zip/Compress/Bcm -f ../../cmpl_gcc_x64.mak -j16
        cp CPP/7zip/Compress/Bcm/b/g_x64/Bcm.so bin/
    - name: Build (Linux/Clang)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'clang' }}
      run: |
        # checking only Alone2 is enough
        mkdir -p bin/Codecs
        make -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_clang_x64.mak -j16
        cp CPP/7zip/Bundles/Alone2/b/c_x64/7zz bin/
    - name: Build (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        mkdir -p bin/Codecs
        make -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_mac_x64.mak -j16
        cp CPP/7zip/Bundles/Alone2/b/m_x64/7zz bin/
    - name: Build (Win64)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'win64' }}
      shell: bash
      run: |
        sudo apt update
        sudo apt install mingw-w64 -y
        mkdir -p bin/Codecs
        make -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_gcc_x64.mak SystemDrive=1 RC=x86_64-w64-mingw32-windres CROSS_COMPILE=x86_64-w64-mingw32- -j16
        cp CPP/7zip/Bundles/Alone2/b/g_x64/7zz.exe bin/
    - name: Build (Win32)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'win32' }}
      shell: bash
      run: |
        sudo apt update
        sudo apt install mingw-w64 -y
        mkdir -p bin/Codecs
        make -C CPP/7zip/Bundles/Alone2 -f ../../cmpl_gcc_x86.mak SystemDrive=1 RC=i686-w64-mingw32-windres CROSS_COMPILE=i686-w64-mingw32- -j16
        cp CPP/7zip/Bundles/Alone2/b/g_x86/7zz.exe bin/
    - name: Upload wheel (Linux/GCC)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'gcc' }}
      uses: actions/upload-artifact@v2
      with:
        name: linux
        path: bin
    # - name: Upload wheel (Linux/Clang)
    #   if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'clang' }}
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: linux_clang
    #     path: bin
    - name: Upload wheel (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      uses: actions/upload-artifact@v2
      with:
        name: macos
        path: bin
    - name: Upload wheel (Win64)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'win64' }}
      uses: actions/upload-artifact@v2
      with:
        name: win64
        path: bin
    - name: Upload wheel (Win32)
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.mode == 'win32' }}
      uses: actions/upload-artifact@v2
      with:
        name: win32
        path: bin
