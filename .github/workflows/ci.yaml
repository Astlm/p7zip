name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build:
    # 由于现在只有一个构建配置，runs-on 可以直接指定，或者继续使用 matrix (虽然只有一个条目)
    runs-on: ubuntu-22.04 # 直接指定操作系统
    # 或者，如果您想保留 matrix 结构（即使只有一个配置）：
    # runs-on: ${{ matrix.os }}
    # strategy:
    #   matrix:
    #     include:
    #       - os: ubuntu-22.04
    #         mode: "linux-arm64"

    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodule
      run: |
        git submodule init
        git submodule update

    # UASM 设置 (Linux)。由于我们只在 Ubuntu 上构建，此步骤保留。
    # 尽管 UASM 主要用于 x86 汇编，但保留它以防万一 p7zip 的构建过程间接使用，且它无害。
    - name: Set up UASM (Linux)
      # if: ${{ startsWith(matrix.os, 'ubuntu-') }} # 如果不使用 matrix，此条件可以直接移除或设为 true
      run: |
        curl -L https://github.com/Terraspace/UASM/archive/refs/tags/v2.55.tar.gz | tar xz
        make -C UASM-2.55 -f gccLinux64.mak
        sudo cp UASM-2.55/GccUnixR/uasm /usr/local/bin/

    # 唯一的构建步骤：Linux ARM64
    - name: Build (Linux/ARM64)
      # if: ${{ matrix.os == 'ubuntu-22.04' && matrix.mode == 'linux-arm64' }} # 如果不使用 matrix，此条件可以移除
      run: |
        sudo apt update
        # 确保安装了所有必要的交叉编译工具和目标libc的开发文件
        sudo apt install -y clang lld g++-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-dev-arm64-cross

        export TARGET_SYSROOT=/usr/aarch64-linux-gnu

        # 调试步骤：检查 libc 相关文件的位置和内容 (如果编译成功，后续可以移除)
        echo "--- Debug: Listing libc files in sysroot ---"
        ls -l ${TARGET_SYSROOT}/lib/libc.so* || echo "libc.so* not found in ${TARGET_SYSROOT}/lib/"
        if [ -f ${TARGET_SYSROOT}/lib/libc.so ]; then
          echo "--- Debug: Contents of ${TARGET_SYSROOT}/lib/libc.so ---"
          cat ${TARGET_SYSROOT}/lib/libc.so
        fi
        echo "--- Debug: Listing actual libc.so.6 symlink target if possible ---"
        ls -l $(readlink -f ${TARGET_SYSROOT}/lib/libc.so.6 2>/dev/null) 2>/dev/null || echo "Could not determine target of ${TARGET_SYSROOT}/lib/libc.so.6"
        echo "--- Debug: Checking alternative common locations for libc.so.6 ---"
        ls -l /lib/aarch64-linux-gnu/libc.so.6 2>/dev/null || echo "/lib/aarch64-linux-gnu/libc.so.6 not found"
        ls -l ${TARGET_SYSROOT}/lib/aarch64-linux-gnu/libc.so.6 2>/dev/null || echo "${TARGET_SYSROOT}/lib/aarch64-linux-gnu/libc.so.6 not found"
        echo "--- End Debug ---"

        # 创建 clang/clang++ 的 shim 脚本，并加入 --sysroot 参数
        echo '#!/bin/sh' | sudo tee /usr/local/bin/aarch64-linux-gnu-clang
        echo "clang --target=aarch64-linux-gnu --sysroot=${TARGET_SYSROOT} -fuse-ld=lld \"\$@\"" | sudo tee -a /usr/local/bin/aarch64-linux-gnu-clang
        echo '#!/bin/sh' | sudo tee /usr/local/bin/aarch64-linux-gnu-clang++
        echo "clang++ --target=aarch64-linux-gnu --sysroot=${TARGET_SYSROOT} -fuse-ld=lld \"\$@\"" | sudo tee -a /usr/local/bin/aarch64-linux-gnu-clang++
        sudo chmod +x /usr/local/bin/aarch64-linux-gnu-clang /usr/local/bin/aarch64-linux-gnu-clang++

        # 为 CMake 设置 LDFLAGS 和 CMAKE_FIND_ROOT_PATH 相关变量
        export LDFLAGS="--sysroot=${TARGET_SYSROOT} -L${TARGET_SYSROOT}/lib -L${TARGET_SYSROOT}/usr/lib"
        export CMAKE_SYSROOT="${TARGET_SYSROOT}"
        export CMAKE_FIND_ROOT_PATH="${TARGET_SYSROOT}"
        export CMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER
        export CMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY
        export CMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
        export CMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY

        # lzham 相关修复 (如果需要)
        if [ -f Codecs/lzham_codec_devel/lzhamdecomp/lzham_platform.h ]; then
          sed -i -e 's/\&\& LZHAM_PLATFORM_PC/\&\& LZHAM_PLATFORM_PC \&\& !defined(__aarch64__)/' Codecs/lzham_codec_devel/lzhamdecomp/lzham_platform.h
        fi

        export CMPL=cmpl_clang_arm64
        export OUTDIR=linux_arm64_clang
        export FLAGS="CROSS_COMPILE=aarch64-linux-gnu-"
        export CFLAGS_ADDITIONAL="-march=armv8-a -Wno-error -Wno-unused-command-line-argument"
        
        ./build_linux.sh

    # 唯一的上传步骤：Linux ARM64 产物
    - name: Upload (Linux/ARM64)
      # if: ${{ matrix.os == 'ubuntu-22.04' && matrix.mode == 'linux-arm64' }} # 如果不使用 matrix，此条件可以移除
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: bin
